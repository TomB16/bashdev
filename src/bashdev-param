#!/bin/bash

# bashdev-param - Robust Parameter Handling Library

# Initialize all arrays with proper existence checks
declare -gA __BASHDEV_PARAMS=()
declare -gA __bashdev_params_desc=()
declare -gA __bashdev_param_opts=()
declare -gA __BASHDEV_PARAMS_REQUIRED=()
declare -gA __BASHDEV_PARAMS_TYPES=()
declare -gA __BASHDEV_PARAMS_DEFAULT=()
declare -ga __BASHDEV_POSITIONAL_PARAMS=()
declare -ga __BASHDEV_PARAMS_ORDER=()
declare -g  __BASHDEV_PARAMS_PARSED=false

# Color codes
declare -g RED='\033[0;31m'
declare -g GREEN='\033[0;32m'
declare -g YELLOW='\033[1;33m'
declare -g BLUE='\033[0;34m'
declare -g NC='\033[0m'

param::add() {

[[ $# -eq 0 ]] && { echo "Usage: param::add -n name [options]" >&2; return 1; }

    local name="" desc="" required=false type="string" default="" short="" long=""

    while [[ $# -gt 0 ]]; do
        case "$1" in
            -n|--name) name="$2"; shift 2 ;;
            -d|--desc) desc="$2"; shift 2 ;;
            -r|--required) required="$2"; shift 2 ;;
            -t|--type) type="$2"; shift 2 ;;
            -D|--default) default="$2"; shift 2 ;;
            -s|--short) short="$2"; shift 2 ;;
            -l|--long) long="$2"; shift 2 ;;
            *) echo "Unknown option: $1" >&2; return 1 ;;
        esac
    done

    [[ -z "$name" ]] && { echo "Parameter name (-n) is required" >&2; return 1; }

    # Store all metadata
    __bashdev_params_desc["$name"]="$desc"
    __BASHDEV_PARAMS_REQUIRED["$name"]="$required"
    __BASHDEV_PARAMS_TYPES["$name"]="$type"
    __BASHDEV_PARAMS_DEFAULT["$name"]="$default"
    __BASHDEV_PARAMS_ORDER+=("$name")

    # Map option flags to parameter names
    [[ -n "$short" ]] && __bashdev_param_opts["-$short"]="$name"
    [[ -n "$long" ]] && __bashdev_param_opts["--$long"]="$name"

    # Initialize parameter with default value
    __BASHDEV_PARAMS["$name"]="$default"
}

param::parse() {
    __BASHDEV_PARAMS_PARSED=false
    __BASHDEV_POSITIONAL_PARAMS=()

    local short_opts="h"
    local long_opts="help"
    local -A opt_to_param=()

    # Build getopt-compatible short and long options
    for opt in "${!__bashdev_param_opts[@]}"; do
        local param_name="${__bashdev_param_opts[$opt]}"
        local type="${__BASHDEV_PARAMS_TYPES[$param_name]:-string}"

        if [[ "$opt" =~ ^-- ]]; then
            long_opts+=",${opt:2}"
            [[ "$type" != "flag" ]] && long_opts+=":"
        elif [[ "$opt" =~ ^- ]]; then
            short_opts+="${opt:1}"
            [[ "$type" != "flag" ]] && short_opts+=":"
        fi

        opt_to_param["$opt"]="$param_name"
    done

    # Use getopt to parse
    if ! opts=$(getopt -o "$short_opts" -l "$long_opts" -n "$0" -- "$@" 2>&1); then
        echo "${opts//getopt: /}" >&2
        param::help
        return 1
    fi

    eval set -- "$opts"

    while true; do
        case "$1" in
            -h|--help) param::help; exit 0 ;;
            --) shift; break ;;
            -*)
                local opt="$1"
                local param_name="${opt_to_param[$opt]}"
                if [[ -z "$param_name" ]]; then
                    echo "Unknown option: $opt" >&2
                    param::help
                    return 1
                fi

                shift
                if [[ "${__BASHDEV_PARAMS_TYPES[$param_name]}" == "flag" ]]; then
                    __BASHDEV_PARAMS["$param_name"]="true"
                else
                    __BASHDEV_PARAMS["$param_name"]="$1"
                    shift
                fi
                ;;
            *) __BASHDEV_POSITIONAL_PARAMS+=("$1"); shift ;;
        esac
    done

    __BASHDEV_PARAMS_PARSED=true
}

param::help() {
    echo -e "${GREEN}Usage: ${0##*/} [OPTIONS]${NC}"
    echo -e "${BLUE}Options:${NC}"

    for name in "${__BASHDEV_PARAMS_ORDER[@]}"; do
        local shorts=()
        local longs=()

        # Separate short and long flags for nicer output
        for opt in "${!__bashdev_param_opts[@]}"; do
            if [[ "${__bashdev_param_opts[$opt]}" == "$name" ]]; then
                if [[ ${opt:0:2} == "--" ]]; then
                    longs+=("$opt")
                else
                    shorts+=("$opt")
                fi
            fi
        done

        # Join short flags with comma, e.g. "-v"
        local short_str=""
        [[ ${#shorts[@]} -gt 0 ]] && short_str=$(IFS=,; echo "${shorts[*]}")

        # Join long flags with comma, e.g. "--verbose"
        local long_str=""
        [[ ${#longs[@]} -gt 0 ]] && long_str=$(IFS=,; echo "${longs[*]}")

        # Compose flag list with short flags first (if any), then long flags
        local flags=""
        if [[ -n "$short_str" ]]; then
            flags="$short_str"
            [[ -n "$long_str" ]] && flags+=", $long_str"
        else
            flags="$long_str"
        fi

        flags+=" <${__BASHDEV_PARAMS_TYPES[$name]}>"
        [[ "${__BASHDEV_PARAMS_REQUIRED[$name]}" == "true" ]] && flags+=" (required)"
        [[ -n "${__BASHDEV_PARAMS_DEFAULT[$name]}" ]] && flags+=" [default: ${__BASHDEV_PARAMS_DEFAULT[$name]}]"

        printf "  %-35s %s\n" "$flags" "${__bashdev_params_desc[$name]}"
    done
}

param::get() {
    local name="$1"
    echo "${__BASHDEV_PARAMS[$name]}"
}

param::getPositional() {
    echo "${__BASHDEV_POSITIONAL_PARAMS[@]}"
}

param::parsed() {
    [[ "${__BASHDEV_PARAMS_PARSED:-false}" == true ]]
}









###################################################
# Example usage (comment out in actual library)
###################################################

# # Define parameters
# param::add -n "input" -d "Input file path" -r true -t string -s i -l input
# param::add -n "output" -d "Output directory" -t string -s o -l output -D "./out"
# param::add -n "verbose" -d "Enable verbose output" -t flag -s v -l verbose
# param::add -n "count" -d "Number of items to process" -t int -s c -l count -D 10
# param::add -n "force" -d "Force operation" -t bool -s f -l force -D false

# # Parse parameters
# param::parse "$@"

# # Access parameter values
# input_file=$(param::get "input")
# output_dir=$(get_param "output")
# verbose=$(get_param "verbose")
# count=$(get_param "count")
# force=$(get_param "force")

# echo "Input: $input_file"
# echo "Output: $output_dir"
# echo "Verbose: $verbose"
# echo "Count: $count"
# echo "Force: $force"
# echo "Positional: $(get_positional_params)"
